IF OBJECT_ID('tempdb.dbo.#Input', 'U') IS NOT NULL
BEGIN
	DROP TABLE #Input
END


CREATE TABLE #Input (
	IndexId bigint not null IDENTITY(1,1),
	SumRow nvarchar(max)
)

-- TEST CASES
--INSERT INTO #Input
--VALUES
--('2 * 2 + 3'),											-- 10
--('1 + 2 * 3 + 4 * 5 + 6'),								-- 231
--('1 + (2 * 3) + (4 * (5 + 6))'),						-- 51
--('2 * 3 + (4 * 5)'),									-- 46
--('5 + (8 * 3 + 9 + 3 * 4 * 3)'),						-- 1445
--('5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))'),			-- 669060
--('((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2');	-- 23340

---- ACTUAL INPUT
INSERT INTO #Input
VALUES 
('9 * 7 + ((6 + 9 * 2 + 6 + 7 + 5) * (5 + 9 + 7) * 6) * (4 + 8) + 5 * 8'),
('3 * (4 * 9 + 8 + 4 * 4 + 7) + 7 * (8 * 9)'),
('4 * ((6 * 5 * 9) + 2) + 9 * 4'),
('((4 * 6 * 2 * 9) + 7 * 4) + 4 * 6 + 5 * 6 + 6'),
('9 * 8 * ((5 + 7 * 8 * 2) * 6) + 3'),
('6 + (3 * 7) * 3 + (9 * (6 * 6 + 5 + 9 + 9) * 7 * 9 + (4 * 8) + 8)'),
('6 * 4 + 2 + 8 + 7'),
('(5 * (9 * 8) * 6) + 2 + 8 * 5 * 4 * 3'),
('(3 + 2 * 2 * 8 * 5) + (7 + 6 * 4 * 8) * (6 * 9 * 5 * 9)'),
('(4 * 2 + (9 + 2 * 4) * 5 + 9) + (9 * 3)'),
('7 * 6 + 6'),
('4 + (8 + (5 * 9) + 9 * 8)'),
('9 + 8 + 5 + 4 * 2 * 9'),
('8 * (5 + (8 + 2) * 9 + 4 + 7) + 8'),
('2 * 2 + 9 * 6 + (2 * (8 * 2 + 3 * 8) * (9 + 7 * 4 * 8 * 2)) * 2'),
('4 + (5 * 6 + 7 * 5) + 4'),
('4 + (9 * 4) + 4 * (4 + 7 + 9 * 4) * 3'),
('(4 * (2 + 2) * 9 * 8 * 3) + 9 * 3'),
('6 * (5 * 3 + 4 + (4 + 4 + 5 * 7 * 4)) * 4'),
('8 * (6 * 9 + 3 * (6 * 6 * 2) + 4 + 9) * (4 * 8 * (9 * 4 + 8 + 7 * 7) * 5) + 4 + 7'),
('(7 * 3 * 2) + 3 + 8 * (5 + 7 * 3 + 4 * 2 * (8 + 6 * 4)) * 3 * (8 + 9 + 7 * 3 * 3)'),
('8 * 7 + 4 + 7 * (3 * 3 + 7 + (3 * 5 * 8 + 8 + 3 * 4))'),
('(7 * (4 * 3 + 8 * 7 * 3 + 9) * 4 + (4 * 7)) * 8 + ((2 * 9) + 6 * 7 + (9 + 3) * 5 + 2) * 8 + 6'),
('6 + 8 * (7 * (5 + 3 + 8 * 5 + 2 * 7) * 4 + 2 + 7 + 7)'),
('(6 * 3 * 7) * 7 * (7 * 7 * 9) + 8'),
('((8 * 7 + 2 + 3) * 4) + 4 * 7 * 6 + 5'),
('2 * 5 * 4 * 9 + ((2 * 4 * 4) + 4 * (5 + 4))'),
('((3 + 5 * 5) + (5 * 9 + 5)) * 3'),
('8 * (3 * (9 * 3 * 9) + 3 + 5) * 2'),
('4 * (8 * 9 * 7 * 2 + 3) + ((9 * 8) * 9) * (4 * 5 + 6 * 8) * 3'),
('(5 + 2 * 9 + 5 + 8) + 9 + 6 * 2'),
('(5 * 9 + 9 + 3 + (5 + 9 + 4 + 3)) + 8 * 7'),
('(7 + 7 * 2 + 8) * (2 * 4 + 3 * 4) + 5 * 4'),
('3 + (4 + 6) + 8 * 5'),
('(6 + 5 * (8 + 2 + 6) * (2 + 9)) * ((3 + 2 * 8 + 4 * 9 * 3) * 6 * 9)'),
('9 + (5 * (2 + 2 * 2) + 5 * 8) * 7 + 3 + 9'),
('2 + 8 * ((2 + 2) * 2 + 4 * 3 + 3) * 5'),
('(2 + 5 * 3 * (4 * 3 + 8 + 6) + 6) + ((7 + 9) + 4 * 3) + 6 * 9'),
('(8 + 7 * (8 + 3 * 7 + 4 + 7) + (5 + 6)) + 4 * (9 * 2 + (8 + 7 * 4 * 6 + 3) + 7 + 2) + (3 * (2 + 2 * 3))'),
('(3 * 6 * 4 * 8 + 4) + 6 + 3 * 3 + 4'),
('8 + ((6 * 2) + 6 * (8 + 5 * 2 * 2 * 9 + 8)) * 5 * 7'),
('7 + 3 + 5 + ((3 + 8 + 2) * 5 * 9 * 4 * 9 + 5)'),
('4 * 5 * (8 + 6)'),
('9 * 7 * 4 + (4 + 5) * 4'),
('9 + 6 + (8 * 5 * (3 + 2 * 7 + 2 + 2 + 9) + 8 * (8 * 5 + 5 * 5 * 3 * 7) * (5 * 3 + 8 + 7 * 4)) + 7 + 2 * 5'),
('6 + ((2 * 3 + 9 * 8 * 8) + 6 * (5 * 5)) * 2 + 3 * (2 + (7 * 8 * 9 * 4 + 7 * 3) * 2 * 7 * (7 + 3 + 2 * 7 + 9 + 2)) + (3 * 9 + 2 * 8 * 4 * 2)'),
('(7 * 4) * 2 + 7 + 2 + 3'),
('(5 + 6 + 8) + 8 + 3 + (5 + 8 * 5 + 5 + 8) + 3'),
('2 * (6 * (3 + 5)) + 4 + (3 + 9 * 5 + 8 + (6 + 4 + 2 + 2 * 2 * 4)) * 3 + 8'),
('(2 + 7 + 3) + 7 + 2 + 6 * (6 * (4 + 7 * 8 * 5)) * 4'),
('7 * 5 + 3 + 3'),
('4 * (2 + 3 + 5) * 2 * 3'),
('(8 * 8 + (7 * 4 * 6 * 6 + 2 * 6) + (8 + 6 + 2) * 7 * 8) + (3 * (8 + 9 + 6) + 4 * 7) + 5 * 8'),
('(7 * 8 * 2 + 3 * 9) * ((4 * 4 + 5) + (6 + 4 + 9 + 5) + 3 * 2 * (2 + 5 * 7)) + 4 + 8 * ((8 * 8 + 5 * 4 * 3 + 4) * 5 + 4 * 4 + 4 + 7)'),
('(9 + 8 + (4 + 2 * 9) + 7 + 7) + 7 * 8'),
('(3 * 5 + (7 + 5 * 2 + 2)) * 4'),
('(5 + 8) * 6 + (6 + (7 + 4 + 3 + 2 + 6 + 9))'),
('4 * 2 + 2 + 9 + 3 + (2 * 6 * (2 * 2 * 8) + 6 * (3 + 2 * 3 * 4 + 9) * 7)'),
('(7 + (9 + 8 + 6 * 6 * 2)) + 6 * (8 * 9 * (5 * 7 + 6 + 3)) + 4'),
('(3 * (9 + 2) + 6 + 6) + 4 * 4 * 4 * 7'),
('4 * 4 + 6 * 3 * 2 * 7'),
('3 + (7 + 3 + (4 + 4 * 3 + 5 + 4) * 9 + (2 + 5 + 7 * 7 * 2) * 4)'),
('5 * (3 * 6 * (7 + 2 * 2) + 7 + 7) + (2 + 7 + 3 * 7 * 6) + 3 * 4 + 4'),
('2 * 4 * 2 * (8 * (7 * 7) * 7 * (2 * 8 + 7)) + 5'),
('4 + 6 + (8 * 9 + 4 + 8 + 4) * 3'),
('5 * 9 * 9 + 4 + 2 + (3 + (5 + 9))'),
('(9 + 8 + (6 * 5 + 7 * 5 * 4) + (6 + 7 * 2 + 8 + 6)) * 4 + 8 * 6 + 8'),
('7 * 2 + ((7 + 3 * 7 * 7 * 2) * (9 * 9 * 8 + 7) * (7 + 9 * 4 * 2 + 3) + 6) * 6'),
('8 * 4 + 9 + 7 * (6 + 9)'),
('6 + 3 + 3 * 7 + ((8 + 9) * 4) * 6'),
('7 + 6 * (2 * (6 + 7) * (8 * 6)) + 5 + 7'),
('7 * (5 + 9 * 6 * 5) * 7 + 6 * 2 * 2'),
('7 * 3 * (2 + (9 + 3 * 6) + 8 * (9 * 2 * 2 + 2) * 3 * 5)'),
('6 + 5 * 7 * 9 * (8 * 2 * 6 * 5 + 9 * 6) * 2'),
('5 * 3 + (8 * (9 + 3 * 2 + 9 * 4) * 2 * 7) + 2 * (2 + 8 * 6 + 5 + 7 * 3)'),
('9 * 4 * (6 + (2 + 6 + 4 + 2 * 5) * 8 + 2 + 8) + 4 * 3 * (9 + 8)'),
('3 * 6 + 9 + 6 * 3 + (7 + 7 * 2)'),
('7 * (8 + (3 + 9 * 3) * 3 + 2 + 9 * 5) + (3 + (3 + 3 + 8 * 9))'),
('2 * 2 * ((3 * 6) + 7 + 2 * (9 + 8 * 3 * 6) + 5) * (4 + (2 * 2 + 8 + 8 + 6 + 4) + (7 * 2 * 2 + 9 * 8 + 8) + 9 + 3)'),
('(7 + 2 * 8 * 3) + 9'),
('8 * 8 + (9 + 2 + 3 + 2)'),
('(3 + 2 * 4 * 6 * 3) + 7'),
('8 * 4 * 3 + (7 + 5 + 6 * 5 * 6) + 9'),
('(2 * 3) + (8 * 2 * (6 * 3) * 5) * ((7 * 9 + 4 * 4) + 2 * (4 * 9 + 3) + 9 * (5 * 5) * 4)'),
('2 + 6 * (3 + 5 * 7) * 2'),
('(6 + (3 + 4) * 6 * 8) + 8'),
('8 * 5 * 2 + (7 * (5 + 3 + 4 + 4) * 4 + 9)'),
('5 * 9 * (5 + 8 + 9 * (2 + 7 * 2 * 6)) * 9'),
('(5 + 9 * (6 * 7 + 9 + 6 * 8) * 8) * (3 + 7 + 2) * 2 + (9 + 6 * 4 * (9 * 3 * 4) * 5 * (7 * 4 + 3)) * 8'),
('7 * 3 * 7 * 3 * ((3 + 2 * 9) + 6 * (3 * 2) + 4)'),
('7 + 4 * (7 + 9 * 8) * 7 * 5 + 7'),
('(7 + 9 * (2 + 4 * 9 * 4 * 7 + 4) * 3) * (8 * (2 * 4 + 6 * 2) * 6)'),
('((3 * 6 + 4 * 6 * 4) * 6 * 8 * (9 * 4 + 2 + 5 + 3 + 9) * 5) * 6 + (9 + 8)'),
('(3 * 3 + 4) * 4'),
('(4 * (7 * 6 + 4 * 4 * 5) * 3 + 3) + 6 * 6 * (2 * 3 * (8 * 3 + 2 * 5 * 6 + 7) + 9 + 5) * 4 * 7'),
('(2 * (5 * 6 + 9) * 7) + 3'),
('5 + 9 + 2 * ((6 * 6) * (3 + 7 + 6 + 6) + 3 + 5)'),
('4 * 2 * 9 + (3 + 4 + 5 * (4 + 8 * 5) * 9 + 5)'),
('7 + 4 * 6 + 9 * 7 + 3'),
('(8 * 7) + 7 * 3 * (7 * 9 * (4 + 4 + 7 * 5 + 7 * 2) + 9 * (5 * 5 * 8 + 7) * 3) + ((9 * 8 + 8) + 2 * 2) + 6'),
('2 + 7 * 4 * 7 * (4 * 3 + 6 + 8 * 6) + 7'),
('6 + (9 + 8 * (5 * 7) * 4) * (5 * 8 * 2 * (8 * 6 + 6) * 5 + 3) + 4 * 7'),
('6 + 5 + (7 + (8 + 2) * 4 * 3 * 2 * 9) * 7'),
('7 + 3 * 9'),
('(5 * 5 + 8 * (9 * 4 * 3 + 6 + 8 * 2)) * (2 * 6 + 8) + 6 * 7'),
('(2 + 8) * 9 + 4 + 4 * 2 + (3 * 3 + 9 + 2 + 9 + 5)'),
('((5 * 4) + (3 * 4 + 3 + 4) + (8 + 3 + 3 + 9 + 2) + 4) * 9 * 7 * 9 + 6'),
('9 + 3 * 4 * (9 + 6 * (9 + 8) + (8 * 4) * 5 + 2)'),
('(4 + (3 + 2 * 4 + 7) + 4 + 2) * 4 * 7 * 3 * (2 * 8 * 9 * 5 + (3 * 3 + 8) * 3)'),
('2 * 7 * (2 * 5 + 5 * (2 + 7 + 4)) * 7 + 2 + 4'),
('4 * 2 * (6 * 6 + 2 + 2 + 6 * (2 * 2 * 8)) + 3 * 9'),
('(5 * 9) + 2 + (3 * 8 * (8 + 4 * 3 + 7 * 9 * 5) * 2 * 6)'),
('2 * 9'),
('6 * 9 * 2 + 9 * (4 + 3) * (8 + 6 * 9 * 3 + 7 * (2 * 2 + 7 + 8 + 3 * 7))'),
('3 * 8 + 9 + 4'),
('9 + (4 * 9 + (6 * 9 + 6) + 2 * 6 * 9) * (2 * 4 * (3 * 5 * 2 + 2 + 8 * 6)) * 6'),
('(3 * (3 * 6 + 8 + 3 + 7) * 9 * (8 * 3 * 4) + 6 + 3) + 8 * (4 + 9 + 3 + 2 + (4 + 4 * 6 + 2))'),
('6 + 5 * 2 + 7 + ((9 + 2 + 4) * 6 + 5 * 8) * ((6 + 5 + 6 + 2) + (6 * 3 + 7) + 7 * 2 + (7 * 7 + 3 * 4 * 3 + 2))'),
('((2 + 3 * 6 * 5) * 7 * 9 * 5 * 2 * 8) + 8 + 3 * 3 * 6'),
('7 * (8 * 6) * 4 + 2 * 7 * 8'),
('2 + 4 + (9 * 5 + 3)'),
('5 + ((7 * 8) + 8 + 6 + 6 * 2 * 3) * 2 * 3'),
('9 + (4 * 5 * (6 * 6 * 9 * 5 * 6 * 8)) * (8 + 5 + 3 * 7) + 9 * 3 * 4'),
('8 + 4 * 5 * 2'),
('5 + 2 + 8 + 4 * (9 * 2 * 6) * 3'),
('4 * 6 * (5 * 2 + 3 + 5 + (8 + 5 * 7 * 4) + 4) * 8 + 2'),
('(9 * 7 + 2 + (3 * 5 * 4 + 6 + 3 * 2) * (4 * 8)) * 3 + ((9 * 2 + 6) * 6 + 5 + 5 + 5) * 8'),
('(8 + (2 + 2)) * 7 + (9 * 9 + 3) + ((5 * 4 * 9) + (2 * 6 + 9)) + 3 * 3'),
('6 * 8 + 8 + 2 + 7 + (5 + 3)'),
('2 + 2 * (4 + 5) * 6 + 4 * (6 * 8 + 4 + 2 * (9 + 5) * 3)'),
('(5 * 5 + 6) + 8 + 3 * (2 * 3 * 3 + 6 * 7 * (6 + 7 + 8 * 6 * 4))'),
('7 * 8 + 2 + 5 * (9 + 6 + (5 + 5 * 6 * 3 + 7) * 2 * 5 + (7 + 8))'),
('6 * (9 + 5 * 3) * 7 * (9 * 5) + 3 + 4'),
('(9 + (3 + 2 * 2) * 6) * 2 + 5 * 6 + ((9 * 2 + 4 + 5 * 7) * 2 * 7 + 5)'),
('6 + (5 + 7 + 5 + 5 + 9 + 5) * (8 * 4 * 8 + 4) + 4 * 3 * 9'),
('2 * 9 * 9 * (4 + 2) * 7 + (2 * (4 * 7 + 3) + 8 * 9 * 3 + 9)'),
('5 * 5 * (6 * (8 * 2) + 8 * 8)'),
('(4 * (5 * 9 * 2 * 8 * 5) * 8 + (6 + 3)) + (8 * 9 + 4 * (5 * 5 + 6)) * 4 + 6 * 4'),
('9 * 6 + 6 + (7 * (3 + 3 * 9 + 7 * 7 + 5) + 3)'),
('5 * ((5 * 3 + 5 + 7 + 2 + 3) + 8) * 6 + 9 * 7'),
('(4 * 9 + 4 + 2 * (8 + 9)) * 6 * 4 + 9 + 5'),
('5 * 4 + 3 + 2'),
('(5 * (9 + 7 + 3 + 4) * (8 + 3 + 9 + 9 + 9) + 5 + 9) * (3 * 3) * 7 + (2 * 6) + 8'),
('(7 * 6 + 7) * 7 + 9'),
('((6 + 4 * 9 * 7 * 8) * 3 + 3 * 5 + 7) * 5 * 9 + (5 * 2 + (2 * 7 + 8 + 3)) + 5'),
('(3 + 8 * 4 * 3 * 5 + 9) + ((8 + 3 + 9 + 3) * 8 * 5 * 5 * 3) * 4 + 9 * 6'),
('4 * 3 + 2 * (9 * 6 * 3 + (9 + 3 + 4 + 8 * 4 * 4) + 3 + 6) * ((2 * 9) + 7) + 5'),
('(6 * 9) * 2'),
('8 * (5 * (7 * 4 * 5 * 3 + 4))'),
('2 * 9 + 7 + (8 + 5 * 8 * 8)'),
('8 + 5 + (2 + 3 * (7 * 8 + 3)) * 4 + 8 + 6'),
('(6 * 4 + (3 * 6 + 7) + 9 + 5) + 4 + 4 + (5 * (9 * 7)) + 7 * 6'),
('6 * (7 * 9 + 3 * 3 + 4) * 4 * 4 + 7 * 6'),
('(2 * 5 + (5 + 5 * 9 * 3 * 4 * 9) * 7) * 8 + 9 * (6 + (9 * 4 + 3 + 2 + 9 * 3) * 4)'),
('(6 + 6 * 6 + 6) + 3 + 6'),
('3 + 5 * 6 + 8 * ((5 * 5 + 8 * 4) * 9 + 7 + 6)'),
('8 * 9 + 5'),
('4 * 3 + (8 * 2 + (3 + 5 * 4 + 9))'),
('(4 + 9) * 3 * 3 + (7 * (6 + 5 + 7 + 9) * 4 * 2 * 2 + (9 * 4 + 7 + 4 + 7 * 3))'),
('(2 + 8 * 6 + 2 + 8 * 6) * 2 + 7 * 5 + 3'),
('8 + 3 + 4 + 7 * (5 + 8 + 3 * 8 * 2 * 3)'),
('(2 * 3 + (2 * 6 * 2 + 2 + 8 + 2)) * 9 + (2 + 9) + 4 + 3 + 9'),
('9 + 4 * 4 * ((4 * 6 + 2 + 8 * 7) * (3 + 8 + 6 + 3) * 3 * 3) + 4 + 6'),
('(7 + 8 * 9 + 5) + (4 * 5 * 4 * 9 * 5) * 9'),
('7 * (2 * 5 + 9) * 6 * 3 * 3'),
('(9 * (4 * 9 * 9)) + (5 + (7 * 9 * 2 * 7 + 4) + (3 * 8 * 2 * 2 * 6 * 4) * 6 + (3 + 3 * 2 + 2)) + 2 + (5 * (2 * 5 + 3 * 3 * 4 * 7) * (8 * 4 + 7 + 8 * 5 * 2) * 3)'),
('9 + ((2 * 6) * 3) + (9 * 2 * 8 * (7 + 3 * 5 * 3 * 7 * 8) * 7) + 4 * 4'),
('6 + 9 * (2 + 7 + (7 + 5 + 2) * 5)'),
('(7 * 2 * 4 + 8 * 2) + 8 * 4 + (7 * 3 * 2 * (5 + 8 + 6) * 3) * 6'),
('5 + 9 + (4 * 4 * 3 * 5 + 9)'),
('6 * 2 * 3'),
('((6 + 5) + (8 * 7 + 3 + 6) + 5 + (3 + 2 + 9) + 9) * 6'),
('7 * 9 + 2 + 7 + (8 * 9 * 9 + 2)'),
('(8 + (7 * 4 * 2 + 5) * 8) * 3 + 8 + 2 + 9'),
('((2 * 6 * 3) * (9 * 3) + (3 + 4 + 9) * 2 + (3 * 9 + 9 * 9 * 6 + 3) * (4 * 6 * 5 + 8 + 2)) * ((5 + 4 * 8) * 2 * 5) * 4'),
('4 + (3 + 9 + 2 * 5 * 9) + 8 + (8 * 4 * (8 + 2 + 7 + 7 + 8 * 9) * 6 + 8 + 8) * 5'),
('(4 * (7 + 5 + 8 * 4 * 4)) + 8 * 9 + 9'),
('(7 + 2 * (7 * 4) * (7 * 4 + 6) + 5) + 3'),
('9 * 4 * 5 + 3 + 9 + 5'),
('4 * (5 + (4 * 8 + 4 * 5) * 6) + 4'),
('6 + (7 + (7 * 8 * 3 * 3 * 9 * 3) + (7 + 9 * 7 * 9 + 3 * 6) * 4 + 3 + 4) + 6 + ((4 + 3 * 4 * 7 + 7) * 6 + 5) * 9'),
('9 * 9 * 7 * (8 * (6 * 6 + 2 * 8 * 8 + 8) * 4 * 7 + 4)'),
('(2 + 5 * 6 * (3 + 9)) * (3 + (7 + 9)) * 3 * 2'),
('8 + 8 + 5 * (4 * (3 * 3) + 9 + 6 + 7 + 6) + ((5 * 4 + 7 + 5) + (6 * 9 + 9) + 5 * (9 + 9 + 2 * 4 + 6 * 4) + (4 + 5 + 7 + 8 + 6)) + 6'),
('8 + (4 * (3 + 8) * 7) + 6'),
('6 + 9'),
('4 * (8 + 4 * 5 * 6) * 6 + 2 * 3'),
('6 * 7 * 8 + 9 * 7'),
('((9 * 5 * 2) + 9 * (7 + 6) + 4) + 5 + 3 + 3'),
('9 + 4 * (5 + (8 * 3 + 5 * 9 + 9 * 5) * 2) + (3 + (5 + 4 * 3) * (5 + 2) + (7 * 9)) * 3'),
('2 + (9 + 9 + 5 + 6 + (2 + 9 * 9) * 6) * (9 + 4 + 3 * 7 * 7 + 4)'),
('3 + (8 * 9 * 6 * 2 + (2 + 9 * 3 + 9) * 5) + 7 * 6 + (8 * 5 + (8 + 3))'),
('(6 * (3 + 5) * 2) + 6 * (4 * 7 * 2 + 2 + 8 * 3) + 8 + 4 * 9'),
('3 * 9 * ((9 + 3 + 6 * 7 + 8) * 2 * (9 * 6 * 6 + 5 + 9 * 2)) * 6 * 2 + 3'),
('9 * (6 + 8 + 6 * 6 * 2) + 5 * 3'),
('(3 + 8 + 7 * 8 + 6 + (3 + 2)) * 4 + 2 + 4'),
('((7 + 7 * 4 + 5) * 9 * 9 * 8) + 9 * 8 + 7'),
('3 + ((4 * 9 + 4 * 5 * 2 * 7) + 7 + 2 + 8 * 2) + 5 * 6 + 8 + 5'),
('(4 * 6 + 4 + 5) + 7 * ((6 + 9 * 2 + 8 * 3 * 4) * 9 * 9 + 4) + 3 + 3'),
('6 + (9 * 7 + 2 * (7 + 6 + 6 + 4 * 8 * 9) + 3 * 3) * 2 + 8 * (4 * 9)'),
('9 + 4 + 6 + ((6 + 8 * 2 * 7 * 2) * 8) + 8'),
('(6 + 5) + 2 + 4'),
('(4 * (2 + 5 * 9) + 4) + 4 + 2 + 3 * (5 + 8 + (9 + 9 + 4)) * 6'),
('(7 + 8 * (9 + 8 + 8)) + 5 * 7 + 9'),
('5 + 6 + (9 * 6 * (3 * 4 * 5 * 2) + (5 * 4 + 4 * 2 + 6 + 5)) + 9'),
('((2 + 4) * 5) * 5 * 3 + 3 + 2'),
('8 + (8 + 9 + (9 * 5 * 4)) * 8 * (6 + 8 * 2 + 6 * (3 + 6 * 9 + 2)) + 8 * (5 + (8 + 3 + 6 * 3))'),
('6 * (2 * 7 * 5) + 8'),
('4 * 5 + 8 * (7 + 4)'),
('(7 + 4 + 8 + 4 * 4) * 8 * 5 + ((7 * 6 * 4) + 5 * 6)'),
('7 * ((7 * 3 + 6 * 6 * 2 * 3) * 4 + 8 * 5 + 5) + (9 * 3 + 2 + 2 + 3 + 4) + (7 + 2 + (8 * 8 + 6 + 7 + 7)) * ((5 + 6 * 4 * 3 + 7 + 5) + 2 * 5 + 4 + 5) * 4'),
('4 * (9 * 7 + (7 * 7 + 7 + 3) * 8)'),
('3 + (8 * 8 * 9 + 5 * (3 * 2 + 2 + 2 * 2 + 8)) + (5 * (8 * 4) * 2 + 7 * (7 * 4 + 7 + 2 * 4 * 3) + 6) + 9 * 2 + (4 * (2 + 9 * 6 + 7 + 5 + 7) * 2 + (7 * 5 * 5 + 6 + 6) + 4 * (8 + 5))'),
('((6 * 9 + 3 * 3 + 8) * (3 + 9) * 2 * 2 + 3 * 8) * 3'),
('2 + 5 + (3 + 4 + 8 * 8) * 4 + 6 + 4'),
('(6 * 6) + 9 * ((2 * 2 + 4) + 6 + 9 * 8 * (7 * 4 * 3 * 8 * 3)) * 7 * 2 + 3'),
('9 * 4 + 2 * (3 * 6) * 8 + 3'),
('(9 + 7) * 2 * 7 * 3'),
('(8 * 7 + 2 + 8 * 3) * (3 * 7 * 2 * 2) + 4 * 3 * 3 + 6'),
('(2 + 7 + 7) * 9 + 7 * 7'),
('4 * (9 * 4 + 8 + 9 * 9) * 3 + (3 + 2 + (4 * 2 + 2 + 4 + 9 * 8) * 4) * 9 * 9'),
('4 * 6 * ((4 * 7 + 4) * (2 + 8 + 7 * 5 + 2 * 7)) + 2 + 3 * 5'),
('2 + 2 + 6 + (4 + (7 * 3)) + 5'),
('(9 * (3 + 8 * 3 + 9) + (8 + 4 * 2 * 8 * 2 * 6) * 9 + (5 * 7 * 7) + 5) * 3 + 3'),
('3 * 8 + (6 * 6 * 7 + 3 + 5 + (2 * 7 * 4 + 2 * 3 + 4)) + 8 + 7'),
('7 * 7 + (6 * (3 * 4 * 4 + 7 + 4) * 7 * 7 + (7 + 4 * 4 + 6 * 9 * 7)) * 2 + 8'),
('7 + 3 + 4 + (2 * 4 + 9 + 6 + 8) * 5 + 5'),
('((5 * 7 + 4 + 8 + 8 * 5) + 3 * (3 + 3 + 5 * 9 + 2) * 6) + 2'),
('6 * (8 * 4 + 7 + 7 * 8) * (5 * (2 + 2 + 4 + 8 + 6)) + 6 * 5'),
('3 + 7 + 7 * (3 + 9 * 6 * 6) + 4 * 5'),
('3 * ((4 + 3 * 9) * 4 + 2 * 5 + 6 + (5 + 2 + 2 + 4 + 8)) * 6 * 9 + 3 * (9 + 5 + (9 + 9 + 6 * 6 + 6 + 2) * 3)'),
('(8 + 5 * 6 * 4 + 2 * 4) + (2 + 5 * (9 + 3 * 8 * 8) + 8 * 2 * 4) * (3 + 7 * (8 * 4 * 4 * 8)) * 9 + 8'),
('6 * 6 + (6 + 3 + (8 * 8 * 8 + 5 + 3 * 6) + 7)'),
('3 + 7 + ((3 * 6 + 4 + 9 * 3) * 9 * 7 + 2) + (8 + 2 * 3 * 8 * 7) * 6 + 5'),
('2 + ((7 * 7 * 3) + (4 + 8 + 3 + 5) + 3 + 7 * 9 + 7)'),
('9 * 9 * 7 + ((8 + 7 * 8 * 8 + 6 + 8) + 3 + 2 + 6 + 9)'),
('3 + ((3 + 8 * 5) + 7 * 2) + (2 + 9)'),
('((7 * 2 * 3 * 3 * 9) * 6 * 2 * (3 * 4) + 5) * 4 + 6 + 6 + 2'),
('6 * 3 * 2 + 2 + 4 * 9'),
('4 * 4 * ((2 * 4 * 4 * 2 + 9 + 7) + 9 + 8 + 5) * 9'),
('6 + 4 * 4 * (7 + 6 + (3 * 7 * 6)) + 5'),
('9 + 3 * ((7 * 9 * 7 * 7 + 5 * 4) * 6 * 3 + 3) * 7 * 5'),
('3 + (8 + 6 + (7 * 3 * 9 + 4) + 9 + (3 + 8 + 9 * 8 + 5 * 6) + 8) + ((9 * 2 + 3 * 9 + 6) * 5 * 2 * 7 + 2 + 3) * (6 + (5 * 6 * 5 * 5 * 2) + 4 + 4 + 9) * 7 + (9 * (5 + 3 + 3 * 4 * 7) * 7 * 9 * 8 + 4)'),
('2 * 4 * 3 + (4 + 7 * 4)'),
('(4 * (6 + 4)) * 2 * 9'),
('((8 + 8 + 2 + 4) + 5 * 8 + 2 + 5) * (5 + 9 * 6 + 5 + 9) * 8 * 4 + 7'),
('2 + (7 * 6 * 7 * 4 * 2)'),
('((7 * 5 + 4 * 8) * 5) + 4 + 7 * 8 * 8 + 3'),
('4 + ((6 + 6 + 5 + 8) * 5 + 5 * 2)'),
('(9 + 6 * (6 * 6 + 9 + 5) + 4) * 3 + ((6 + 5 * 2 * 7) * 2)'),
('(3 * (6 * 9 + 9) * 9 * 3) + 2 + 7 + 5'),
('5 * ((6 + 9 + 6) + 7)'),
('2 + 5 + ((9 + 3 + 6 + 4 + 2 + 7) * 7 * 8 * 4 + 8 * 6) * 2 * 2'),
('((4 * 7) + 9 + 7 + 8 + 3) + 6 * 5'),
('(3 + 6 + 7 + (7 * 5)) * 6 + 8 * 9'),
('9 + 5 * 6 * 9 + (8 + 6 * 6)'),
('(7 * (9 + 8 * 4 * 7 + 3) + 8 * 3 * 3 * (6 * 8 * 8 * 3 + 9)) + 8 * 5 + 6 * 6'),
('3 * 4 * ((9 + 2) * (7 * 4 * 9 + 5 + 7)) + (6 + 7 + 8) + 2 * 9'),
('4 + 4 + 4 + 3'),
('6 + 6 * 6 * ((5 + 4 + 5 * 5 + 6 * 9) * (6 * 3 * 9) + 7 + (2 * 4 + 3 * 4) + 6) + 9 + 3'),
('4 * 5 + 5 * (8 + 4 * 7 + (3 * 6 + 3 * 6 + 5 + 9) * (4 + 5 + 6 * 7 + 7 * 8)) * 3'),
('4 * (5 + (2 + 8 + 8 * 7 * 3 * 9) * 4 + 4 * 4) + 3'),
('5 + (3 + (9 + 5 * 7) + 9) + 2'),
('3 * (4 + 9)'),
('9 + 5 * 7 + (7 + 5 + 8 * 3 * 7) + 8 + (2 + 3 * 9 * 4 + 3)'),
('8 + (9 + 8) + 5 * 2 + 9 * ((4 * 8 + 5) * 3 * (8 + 3 + 6 + 5 + 7 * 4) * 5)'),
('7 * 8 * 9 + 9 * (4 + (7 * 9 * 7 + 9))'),
('7 * ((5 * 6 * 4 * 2) * 9 * 7 + 3) + 3'),
('2 + 9 * 4'),
('2 * 2 + (5 + 2 + 4 * 5 + 5) + 5 * 5'),
('4 * 8 + 9 * (7 * 9 + 9 + 8) + 8'),
('9 + ((6 + 6 + 2 * 2 * 9 * 9) * 8 * 9 * 4 * 6)'),
('((2 + 8 + 9 * 4 + 7) * 7 * 5 + 3 + 9) * 4 * 3 + 7'),
('(8 * 8 + (5 + 3 + 9 * 9)) + ((7 + 5 + 5) + 2 + 7) * (9 + 4 + 4) + 8 + 4 * 8'),
('(9 * 6 * 3) * 3 * (6 * 2 + (3 + 4 + 2) * (7 + 9 * 5 + 5)) + 8 + 6'),
('(8 + (3 + 8 * 3) * 3 * 6 + 5) + 5 + 7'),
('((9 + 8) + (6 + 2) * 7) * 2 + 6 * 4 * 2'),
('3 + 6 + (3 + 2 + 2 + 6 * 5 + 3)'),
('(6 + 4 + (2 + 3 * 4 + 3) + 4 + (3 * 2 + 5) * 8) + 9'),
('(3 + 3 + (9 * 4) * 2) + 5 * 7 * 3 * (8 + 4) + 6'),
('(3 + 7) + 7 * (4 + 7 * (9 + 2 * 7) + 8 * 5 * 8) * 3'),
('((2 * 4 * 5 * 4) + 3 + 3 * 7 + (8 * 2 + 6)) + 8'),
('(5 + 6 + 9 + 8 + 8 + 3) * 2 + 6'),
('4 + 6 + 8 + (9 * 8 * 2 + 6 * 4 + 3) * 5'),
('(2 * 2 * 5 * 7 + 4) * 6 + 7 + 5 * (9 + 7)'),
('5 * 9 + (7 * 4 + (9 * 7) * 5 * 7) + 5'),
('(3 * 6 + 8) + 7 + 8 + 3 + 4'),
('4 + 3 * 3 * 3 + 7 * (5 + 9 + 6 + 5 + 6)'),
('3 + 9 + 8 * 4 + (6 * 7 * 3 + 7 * 5)'),
('8 * 3 * (9 * (4 * 8 * 7 * 9 + 3 * 9) * 2 + 5 * 7) * 4 * 4'),
('5 * 7 * (4 * (9 * 7 * 7 + 5) * (7 + 5 * 9 * 6 + 8) + 4 * 6 * (4 + 6 + 6)) + 3'),
('4 + ((4 + 2) + 7 * (3 * 4 + 4 * 9 + 6 + 8)) + 7 * 4 + 5 * 7'),
('((6 + 2 * 6) * 2) + (5 * 9 + 9 + 7) + 7 * 4 * 2'),
('4 + 7 * 8 * 7 + (3 * 7 + (4 * 6 * 5 * 2)) * 5'),
('6 + (9 + 6 * 4 + 6 * 6 + 3) * 5 * 2'),
('8 * 3 * 7 * (6 + 3 + (7 * 6 * 5 + 9 + 4) + 6 * (2 * 7 + 5 + 6) + 3) * (6 * 4 + 2 * 9 * 7 + 6)'),
('2 * (5 * (9 + 6)) * (4 + (5 * 2 + 3) + 7 * 6 * (8 * 4 * 4) * 4) * 5'),
('2 * 2 * (3 + 8 + (4 * 3) + (6 + 5 + 6 + 8 * 5 * 4) + 8) + 3 * 3 + 8'),
('4 * (8 * 4 * (3 * 6) + (5 + 3 + 4 * 6 + 4 + 7) * 4) + ((8 * 2) * (2 * 7) + (9 + 7 * 2 + 2))'),
('3 * 4 + (7 * 8) + (5 + 7 * 8 + 9) * 9'),
('(9 * 4) * 5 * 3 * 9 + 5 + 7'),
('(7 * (9 * 4 + 9 + 5) * (2 + 3 * 3 + 8 + 2)) * 5'),
('((9 * 2 * 9 + 8 + 8 * 3) * 5 * 7 + (2 * 2 * 3 * 2) + 6) + (7 + 8 * (4 + 2 * 9 * 6 + 3 * 9) * 4 * 2) + ((4 + 9 * 9 * 5 * 5) + 2 + 8 * 9 * 2) + 9 * 6'),
('9 + 7 + 9 * (9 + 4 * 5) * 7'),
('7 + 8 + ((2 + 3) * 4) * 6'),
('6 * 4'),
('(9 + 4 * (6 * 2 + 2 + 7 * 6) * 4) * ((6 + 8 + 7 + 4 + 9) + (7 + 9 + 8 + 6)) + (2 * (3 + 8) + 7 * (4 + 3) * 5)'),
('(9 + (2 + 4 * 3 + 3 + 2 + 2) + 4 + (2 + 3) + 3) * ((6 + 6 + 7 * 6) * 2 + 3 + 9 * 4 + 8) * 2 * 2 + (9 + (5 * 6 * 8 * 3))'),
('(8 * (4 + 9 * 3 + 6 + 6) * 7 * 6) * 5 + 4 + 8 * 8'),
('3 * (8 * (4 * 2 + 6 * 6) * 5 + (9 * 6 * 3 + 4 * 4) + (5 * 2 + 7 + 5 + 5))'),
('3 * ((6 + 7 + 7 * 9 + 4) * 6 + 8) + 8 + ((7 * 9 + 5) + 5 + 6) * (5 * 6 + 2 * 6 * 6 + 7)'),
('(3 + (8 + 9) * 5 * 6 + 8) * (2 + 6 + (7 + 4 + 6) * 4 + 3) + 6 + 2 * (7 + 8 * 5 + 7)'),
('5 * (2 + 2 * 6 * (6 + 2 * 4 + 8) + 4 * 5)'),
('4 * 9 * 7 + 7 * 3'),
('((7 + 7 * 6) * (5 * 9 * 6)) * 5 + 5 + 3 + 8 + 4'),
('(4 + (5 + 7 + 7 + 7)) * 4 * (7 * 7 + 3) * 6 * 3 * ((4 * 7) + 4 * 9)'),
('2 * 2 + 6 * ((8 * 9 + 7 * 7) * (5 * 9 * 6 * 6 * 7 + 6) + 5 * 4) + (8 * 7 + 5 * 5)'),
('9 + 6 * ((9 + 5 + 2 + 7 + 3) * 3 * 6) + 9 + 7 * 9'),
('4 * (8 * (4 + 6 * 4 + 8 + 2 + 3) * 5 + 8 * 5) * ((5 + 4 + 2 + 3 * 2 + 9) * (4 * 8 + 9 + 4 * 4 + 4)) + 2'),
('9 + (3 * 3 + 4 + 5 + 6) + 3 + (5 + 7) + (3 + 5)'),
('((3 * 3) + 9 + 4 + 8 + 9 + 2) * (7 * (8 + 8 * 7) * 4 + (4 * 4 + 2 * 5 * 2) * 9)'),
('2 + (7 + (6 * 2 * 4 + 2 * 9 * 2) * 4 * 5) + (4 + 5)'),
('2 + (4 + 3 * 5 * 3 + 3) + 5'),
('6 * 6 + 4 + 8 + 4'),
('((3 + 4 + 2 + 6) + 8) + 2'),
('(4 + 2 * 4 + 6 + 8 * 3) + (3 * 8 + 9 + 7 * 5 + 2) + 7 * 6 * (6 * 3 * 5 * 6) * 6'),
('5 * 6 + (8 * (6 + 6 * 4 + 2) * (2 + 5 + 4 * 7 + 3 * 6) + 8 + 4) * 6 * 6'),
('3 * 6 * 5 * (3 + 4 + 3) * 3 * 5'),
('9 * (4 * (3 * 9 * 4 * 9 + 6 * 7) * 7 + 7 * 7)'),
('7 * 4 + 2 + (7 + (3 * 4) * 9 * 8) * 2'),
('(3 * (9 * 3 + 4) * 3) + 2 + ((3 + 7 + 6 + 4 * 6 + 9) + (3 * 7)) * 8'),
('(4 + 3 + 6 * 7) * (7 * 7 * (8 * 4 + 2 * 8 * 2 + 3) + 4 + 8 * 3) * 8 + 2'),
('3 + (9 + 2 * 3)'),
('7 * 7 * 5 + (2 * (3 + 8 + 2) + 7)'),
('4 * (7 + 7 * 9) * ((8 + 2 * 4 * 6 + 4 + 9) * 5 * 6 + 3 + 3) + (4 + 4 * 2 * (4 + 4 + 3 + 3 + 7) + 2)'),
('2 * 2 + 2 * 9 + 9'),
('9 * 4 + (2 * 5) + 8 * 5'),
('(8 + 9 * (2 * 2 + 3 * 9 * 3 + 3) * 8 * 8) * (9 * 4 * 6 * 7)'),
('7 * (6 * 8 * 8 * (3 * 2 + 4 * 7 + 9 + 6) + (4 + 9 * 3 * 3 + 7 + 3)) + (4 * 3) * 5 * 8 * 4'),
('4 * 8'),
('7 * 2 * (4 + 2 * 7) + ((3 * 2 + 2 * 9 * 6 + 7) + 8 * 6 * 6 + 9) * 7 + 5'),
('(4 * (2 + 4 * 4 + 4) * (8 + 7)) * 7 * 8 * 9 * 9'),
('9 + 5 * 3 * (8 + (9 * 5 + 4 * 3) * 7 * 7 * (6 + 4 * 5 + 7 * 2 + 5)) + 3'),
('(4 * 4 * 9 * 8 + (7 * 2 + 9 * 6 + 4)) + 5'),
('(8 * 4 * 8) + 9 * (7 * 5) * 5'),
('(3 * 4 * 9 * 9 + (5 * 8 * 5 + 4 + 7) + (7 * 8 * 5 + 9 + 5 + 5)) + 2'),
('(8 * 3 + 2 + 9 + 2 + 2) + 3'),
('8 * (9 + 7) + 7 * 2 * (8 + 3 + 5 + 7 + 6) + 2'),
('2 * (2 * 6 + 8 + (7 + 6 + 2) + 3 * 6) * (5 + 8 + 7 + (9 + 9 * 3 * 7)) * 7 + 4'),
('(5 + 5 + 8 * (5 + 2 + 3)) * 9 * 9 + ((2 * 6 * 6 * 9) * 5 + 4 * 6) + 5'),
('5 + 3 * 4 * (3 + 4 + 8) * (3 * 9 + 9 + 7 * 8)'),
('6 * 4 + ((7 + 3 * 3 + 3) + (3 * 7) * 3 + 9 * 2)'),
('(5 * 3 * 7 * 2 + 6) * (2 * 6) + 6'),
('7 * 4 + (6 + 2 * 3 * 9 + (8 + 9) * (5 + 2 + 2))'),
('2 + 2 + ((9 * 2 * 4 + 8 + 3 * 7) * 4 + (2 + 6 + 5 * 5 * 2 + 8) + 5 * 2 * 8) + 4'),
('((2 + 3 + 2 * 8 * 4 * 6) * 4 * 2 * 8 * 5 + 5) + 8 * 9'),
('5 + 4 * (5 + (4 * 4 * 8) * 3 + 3)'),
('4 * 3 + (7 * 4) + 8'),
('4 + (9 * 8 * 5 * 4) + 2 + 4'),
('4 + (7 + 9 * 6) * 5 + 4 + 4 + 6'),
('(2 + 9 * 3) * 2 * (7 + (5 + 8 * 7) + 8)'),
('4 * 3 + 6 + 3 + ((5 + 6 + 7) * 5 * 2)'),
('9 + 8 * (4 + 3) * 4 + 6 * 9'),
('4 * (6 + 5 * 5 * 8 * 6 * 6)'),
('(8 + 7 * 4 + 4 + (2 + 8 * 2 + 4 + 6 + 2)) + 3'),
('2 + (9 * 4) * 7'),
('4 + 7'),
('(9 * (2 * 2 + 4) + 3 * 3 + (7 * 4 * 6 * 4 + 5 + 4) * (8 * 8 * 7 + 8)) * 6 + 3 + 7 + (6 * 5 * 8 * 6) + 2'),
('2 + 6 + (4 + 2 * 7 + 3 * 9 * 9) * ((8 + 2 * 4 * 4 * 2 + 3) + (3 + 9 + 4) * 3 * 4) + 8'),
('8 + (6 * 5 + 2 * 6 * (2 * 3 + 2 * 9 * 7 * 2) + 6) * 2 * 8 + 7 + (6 * 5 * 9 * 6)'),
('6 + (3 + 9 + 3 * 6)'),
('(2 + 5 * 9 * 2) * 2 * 5 + ((4 * 2 * 7 + 8 + 7) + 7 + 6 * 4 * 3 * 6)'),
('(7 + 3 * 6 * (2 * 7) + 7 * 8) * 7 * 2 + 4 + 5 * 2'),
('(6 * 2 * 5) + (7 + 7) * 9 * 5 * 2 * 5'),
('3 * (8 + 3 * 3 * 2) + 5 + (9 * (5 + 8 * 8 * 5 + 8) * 4 + 7 * 8 + 3)');


UPDATE			#Input
SET				SumRow = '(' + SumRow + ')'

WHILE EXISTS
(
	SELECT		*
	FROM		#Input
	WHERE		SumRow like '%(%'
				OR SumRow like '%+%'
				OR SumRow like '%*%'
)
BEGIN
	WITH OpenBracketsPosition_CTE AS
	(
		SELECT		IndexId,
					CHARINDEX('(', SumRow) AS BracketPosition,
					'(' AS Bracket,
					SumRow
		FROM		#Input
		WHERE		CHARINDEX('(', SumRow) > 0
		UNION ALL
		SELECT		IndexId,
					CHARINDEX('(', SumRow, BracketPosition + 1) AS BracketPosition,
					'(' AS Bracket,
					SumRow
		FROM		OpenBracketsPosition_CTE
		WHERE		CHARINDEX('(', SumRow, BracketPosition + 1) > 0
	), CloseBracketsPosition_CTE AS
	(
		SELECT		IndexId,
					CHARINDEX(')', SumRow) AS BracketPosition,
					')' AS Bracket,
					SumRow
		FROM		#Input
		WHERE		CHARINDEX(')', SumRow) > 0
		UNION ALL
		SELECT		IndexId,
					CHARINDEX(')', SumRow, BracketPosition + 1) AS BracketPosition,
					')' AS Bracket,
					SumRow
		FROM		CloseBracketsPosition_CTE
		WHERE		CHARINDEX(')', SumRow, BracketPosition + 1) > 0
	),
	BracketsPosition_CTE AS
	(
		SELECT		*
		FROM		OpenBracketsPosition_CTE
		UNION
		SELECT		*
		FROM		CloseBracketsPosition_CTE
	),
	NextBracketsPosition_CTE AS
	(
		SELECT		IndexId,
					BracketPosition AS CurrentBracketPosition,
					Bracket AS CurrentBracketType,
					LEAD(BracketPosition) OVER (ORDER BY IndexId, BracketPosition) AS NextBracketPosition,
					LEAD(Bracket) OVER (ORDER BY IndexId, BracketPosition) AS NextBracketType
		FROM		BracketsPosition_CTE
	),
	BracketsToReplace_CTE AS
	(
		SELECT		I.IndexId,
					SUBSTRING(I.SumRow, CurrentBracketPosition, NextBracketPosition - CurrentBracketPosition + 1) AS Brackets,
					CurrentBracketPosition,
					NextBracketPosition
		FROM		#Input I
					INNER JOIN NextBracketsPosition_CTE NBP ON I.IndexId = NBP.IndexId
		WHERE		CurrentBracketType = '('
					AND NextBracketType = ')'
	),
	EquationValues_CTE AS 
	(
		SELECT		IndexId,
					Brackets,
					CurrentBracketPosition,
					NextBracketPosition,
					value,
					ROW_NUMBER() OVER (PARTITION BY IndexId, Brackets ORDER BY (SELECT 0)) AS RowNumber
		FROM		BracketsToReplace_CTE
		CROSS APPLY	STRING_SPLIT(SUBSTRING(Brackets, 2, LEN(Brackets) - 2), ' ')
	),
	Evaluate_CTE AS
	(
		SELECT		IndexId,
					RowNumber,
					Brackets,
					CONCAT(
						LAG(value) OVER (PARTITION BY IndexId, Brackets ORDER BY RowNumber),
						' ',
						value,
						' ',
						LEAD(value) OVER (PARTITION BY IndexId, Brackets ORDER BY RowNumber)
					) AS StringToReplace,
					CASE
						WHEN	value = '+'
						THEN	1
						ELSE	0
					END AS IsPlus,
					CASE
						WHEN	value = '+'
						THEN	CAST(LAG(value) OVER (PARTITION BY IndexId, Brackets ORDER BY RowNumber) AS BIGINT)
								+
								CAST(LEAD(value) OVER (PARTITION BY IndexId, Brackets ORDER BY RowNumber) AS BIGINT)
						WHEN	value = '*'
						THEN	CAST(LAG(value) OVER (PARTITION BY IndexId, Brackets ORDER BY RowNumber) AS BIGINT)
								*
								CAST(LEAD(value) OVER (PARTITION BY IndexId, Brackets ORDER BY RowNumber) AS BIGINT)
						ELSE null
					END
					As EvaluatedValue
		FROM		EquationValues_CTE
		UNION
		SELECT		IndexId,
					1 AS RowNumber,
					Brackets,
					Brackets AS StringToReplace,
					0 AS IsPlus,
					TRY_CAST(SUBSTRING(Brackets, 2, LEN(Brackets) - 2) AS BIGINT) AS EvaluatedValue
		FROM		BracketsToReplace_CTE
		WHERE		TRY_CAST(SUBSTRING(Brackets, 2, LEN(Brackets) - 2) AS BIGINT) IS NOT NULL
	),
	OrderedStringToReplace_CTE AS 
	(
		SELECT		IndexId,
					EvaluatedValue,
					Brackets,
					StringToReplace,
					ROW_NUMBER() OVER (PARTITION BY IndexId, Brackets ORDER BY IsPlus DESC, RowNumber) AS OrderOfReplacement,
					REPLACE(Brackets, StringToReplace, EvaluatedValue) AS ReplacedString
		FROM		Evaluate_CTE
		WHERE		EvaluatedValue IS NOT NULL
	)
	UPDATE		#Input
	SET			SumRow = REPLACE(SumRow, Brackets, ReplacedString)
	FROM		OrderedStringToReplace_CTE OSTR
	WHERE		#Input.IndexId = OSTR.IndexId
	AND			OrderOfReplacement = 1

	--SELECT		*
	--FROM		#Input

	--DELETE FROM #Input
END

SELECT		*
FROM		#Input

SELECT	SUM(CAST(SumRow AS BIGINT))
FROM	#Input